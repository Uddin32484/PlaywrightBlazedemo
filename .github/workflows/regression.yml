name: Nightly Regression Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      full_suite:
        description: 'Run full test suite including all devices'
        required: false
        default: true
        type: boolean

jobs:
  full-regression:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            devices: ["Desktop Chrome", "Mobile Chrome", "Android Pixel 7", "Android Galaxy S8+"]
          - browser: firefox  
            devices: ["Desktop Firefox"]
          - browser: webkit
            devices: ["Desktop Safari", "iOS iPhone 13", "iOS iPad Pro"]
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Run comprehensive tests
      run: |
        # Run main test suites
        npx playwright test --project=${{ matrix.browser }} tests/main-booking-validation.spec.ts
        npx playwright test --project=${{ matrix.browser }} tests/comprehensive-booking-tests.spec.ts
        
        # Run screenshot tests for visual regression
        npx playwright test --project=${{ matrix.browser }} tests/screenshot-tests.spec.ts
        
        # Run edge case tests
        npx playwright test --project=${{ matrix.browser }} tests/flight-booking-edge-cases.spec.ts
      env:
        CI: true

    - name: Run Docker tests
      if: matrix.browser == 'chromium'
      run: |
        docker build -t blazedemo-regression .
        docker run --rm \
          -v ${{ github.workspace }}/test-results:/app/test-results \
          -e CI=true \
          blazedemo-regression npm run test:smoke

    - name: Generate test summary
      if: always()
      run: |
        echo "## ðŸ§ª Regression Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Browser:** ${{ matrix.browser }}" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "test-results/results.json" ]; then
          echo "**Test Results:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
          cat test-results/results.json >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Upload comprehensive results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: regression-results-${{ matrix.browser }}
        path: |
          test-results/
          playwright-report/
        retention-days: 14

  report-status:
    needs: full-regression
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Create regression report issue
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'regression-failure',
            state: 'open'
          });
          
          if (issues.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `ðŸ”´ Nightly Regression Tests Failed - ${new Date().toDateString()}`,
              body: `## Regression Test Failure Alert
              
              **Date:** ${new Date().toISOString()}
              **Workflow Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              **Branch:** ${{ github.ref_name }}
              
              ### Failed Tests
              Multiple regression tests have failed. Please investigate:
              
              1. Check the workflow logs for detailed error messages
              2. Review any visual differences in screenshot tests
              3. Validate that the BlazDemo website is accessible
              4. Check for any recent code changes that might have caused regressions
              
              ### Action Items
              - [ ] Investigate failing tests
              - [ ] Fix any code issues
              - [ ] Update test expectations if website changed
              - [ ] Close this issue once resolved
              
              **Auto-generated by GitHub Actions**
              `,
              labels: ['bug', 'regression-failure', 'high-priority']
            });
          }

    - name: Post success notification
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          // Close any open regression failure issues
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'regression-failure',
            state: 'open'
          });
          
          for (const issue of issues) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: `âœ… Regression tests are now passing as of run #${{ github.run_number }}. Closing this issue.`
            });
            
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
          }
